const Discord = require('discord.js');
const blackjack = require('./blackjackFunctions.js');
//const blackjackClass = require("./blackjackClass.js");
const client = new Discord.Client();

const adminId = 177553075295354880;

const digits = 8 ;  //number of digits generated by !checkem
const timer = 15000; //timeout time in milliseconds

const fs = require("fs");



var dubsTimeOut = new Array();
var recordedQuestions = new Array ();
var QballAnswers = new Array ();

loadJSON("./init.json", "questions", QballAnswers);
console.log("8ball answers loaded");
loadJSON("./Rquestions.json", "questions", recordedQuestions);
console.log("question document loaded");

var smug;
var charFull;
var dubsRollers;

console.log(blackjack.initialise());


client.on('ready', () => {
    
    console.log("Connected as " + client.user.tag);
    
    client.user.setActivity("Solitaire til' dawn, with a deck of 51.");
    
    let mainC = client.channels.get("588741231085879317");
    mainC.send("At your service.");
    
})

client.on('message', (receivedMessage) => {
    
    if (receivedMessage.author.bot) {
        return;
    }
    
    if (receivedMessage.content.toLowerCase().indexOf("butler") != -1){
        
        let fullCommand = receivedMessage.content;
        let splitCommand = fullCommand.split(" ");
        let primaryCommand = splitCommand[0];
        let arguments = splitCommand.slice(1);
        Qball(receivedMessage, arguments);
    }
    
    if (receivedMessage.content.startsWith('!')) {
        processCommand(receivedMessage);
    }
})

//process command internal function

function processCommand(receivedMessage){
    
    let fullCommand = receivedMessage.content.toLowerCase().substr(1);
    let splitCommand = fullCommand.split(" ");
    let primaryCommand = splitCommand[0];
    let arguments = splitCommand.slice(1);
    let author = receivedMessage.author;
    
    console.log("processing command " + primaryCommand);
    console.log("from " + receivedMessage.author.username);
    console.log("id " + receivedMessage.author.id);
    
    if(primaryCommand == "checkem") {
    
        if(timeOut(receivedMessage)){
        checkDubs(receivedMessage);
        
        }
    }
    
    if(primaryCommand == "flip") {
        flipCoin(receivedMessage);
    }
    
    if(primaryCommand == "roll"){
        rollDice(receivedMessage, splitCommand[1]);
    }
    
    if(primaryCommand == "smug"){
        smug(receivedMessage);
        }
    
    
    if(primaryCommand == "list"){
        receivedMessage.channel.send("I am capable of <!flip>ping coins, <!roll n>ing dice and of course, <!checkem>.");
    }
    
    if(primaryCommand == "blackjack"){
        blackjackCommand(receivedMessage, splitCommand);
    }
}

//commands

function checkDubs(receivedMessage) {
        
    var message = '';
    
    for(let index = 0; index < digits; index++){
        var n = Math.floor(Math.random() * 10);
        message+= n.toString(10);
    }
   
    receivedMessage.id;
    
    if(message.charAt(digits-2) == message.charAt(digits-1)){
                if(message.charAt(digits-3) == message.charAt(digits-1)){
                              if(message.charAt(digits-4) == message.charAt(digits-1)){
                                    if(message.charAt(digits-5) == message.charAt(digits-1)){
                                            receivedMessage.channel.send(message,{files: ["https://i.gyazo.com/5476b9d4a413d14f75ea96ee1da2798d.png"]});
                                            return;
                                    }
                                    receivedMessage.channel.send(message, {files: ["https://i.gyazo.com/7718902a548aeeb43830d51fd6c2d4f9.png"]});
                                    return;
                              }
                receivedMessage.channel.send(message,{files: ["https://gyazo.com/bf6d0b8e0e1a7762ecdba3d1edac35cf.png"]});
                return;
                }

    receivedMessage.channel.send(message,{files: ["https://i.gyazo.com/a775e3f83ab110d9875a17744de1dd8f.png"]});
    return;
    }
    receivedMessage.channel.send(message);
}

function flipCoin(receivedMessage){
    
    var n = Math.floor(Math.random() * 2);
    
    if (n == 1){
        message = "heads";
    }else{
        message = "tails";
    }
    receivedMessage.channel.send(message)
}

function rollDice(receivedMessage, roll){
    
    if(roll == undefined){
        roll = 6;
    }
    
    var message = "Rolling a dice between 1 and " + roll;   
    receivedMessage.channel.send(message);
    
    if(typeof roll === "string"){
        receivedMessage.channel.send("Wait a minute, I only have dice with numbers!");
        console.log("failed roll");
        return;
    }
        
    var n = Math.floor(Math.random() * roll) + 1;  
    message = receivedMessage.author + " rolled: " + n.toString(10);

    receivedMessage.channel.send(message);
}

function Qball(receivedMessage, question){
    
    let q = receivedMessage.content.toString();
    
    if(q.endsWith("?")){
        
        recordedQuestions.push(receivedMessage.content);
        
        var RQObj = {
            questions: recordedQuestions
        }
        
        let jsonString = JSON.stringify(RQObj);
        
        fs.writeFile("./Rquestions.json", jsonString, err => {
            if(err) {
                console.log("Error writing file", err);
            } else {
                console.log("Successfully wrote file");
            }   
        })
        
    }
    else {
        /*
        receivedMessage.channel.send("I'm sorry master, that was unclear. Please end requests with a question mark<?> to avoid confusion.");
        */
        return;
        
    }
    
    var n = Math.floor(Math.random() * 22);
    console.log(n);
    var message = QballAnswers[n];
    console.log(message);
    receivedMessage.channel.send(message);
    
    
}

function smug(receivedMessage){
    receivedMessage.channel.send({
        files: [{
            attachment: "./images/smug.png",
            name: "smug.png"
        }]
    });
    return;
}


// function blackjackCommand(receivedMessage, splitCommand){
//     if(splitCommand[1] == "create"){
//         let message = blackjack.createGame(receivedMessage.author);
//         receivedMessage.channel.send(message);
//         return;
//     }
    
//     if(splitCommand[1] == "start"){
//         let message = blackjack.startGame(receivedMessage.author, client.user);
//         receivedMessage.channel.send(message);
//         return;
//     }
// }

//utility functions

function timeOut(receivedMessage){
    
        date = new Date();
        var currentTime = date.getTime();
    
    if (dubsTimeOut.length == 0){
        
        var authorId = receivedMessage.author.id;
        var time = date.getTime();
        var user = {authorId, time};
        dubsTimeOut.push(user);
        return true;
    }
    

    for (let index = 0; index < dubsTimeOut.length; index++){
        
        if (receivedMessage.author.id == dubsTimeOut[index].authorId){
                
            console.log("author match");
            console.log(currentTime);
            console.log(currentTime - dubsTimeOut[index].time)
            var remainder = Math.floor((timer - (currentTime - dubsTimeOut[index].time))/1000);
                
            if((currentTime-timer) < dubsTimeOut[index].time){
                    
                    receivedMessage.channel.send("Be patient! I'm afraid I will not be checking anything for you within the next " + remainder.toString() + " seconds." );
                    console.log("user denied");
                    return false;
                    
                }else 
                 dubsTimeOut[index].time = date.getTime();
                return true;
            }
        
        }                
            var authorId = receivedMessage.author.id;
            var time = date.getTime();
            var user = {authorId, time};
            dubsTimeOut.push(user);
            return true;
}

function checkAuthority(receivedMessage) {
     if(receivedMessage.author.id == adminId){
         return 1
     }
     else
        receivedMessage.channel.send("I'm sorry, I simply won't hear of it.")
        return 0
 }

function loadJSON(filename, parameter, targetArray){
    
    this.p = parameter;
    
    fs.readFile(filename, 'utf8', (err, jsonString) => {
    if (err) {
        return("Error reading file from disk:", err);
    }
    try {
        let json = JSON.parse(jsonString);
        
        for (let index = 0; index < json[this.p].length; index++){
            QballAnswers[index] = json[this.p][index];
        }
        
    } catch(err) {
        return('Error parsing JSON string:', err);
        }
    })
}

client.login("NTg4NzI5NDYxMzU3MTUwMjY5.XQJXaA.Hf8lRwQxSd1Spns-gIkkq-I5aTM")